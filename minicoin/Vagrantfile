# -*- mode: ruby -*-
# vi: set ft=ruby :

user = ENV['USER']
coin_root = ENV['COIN_ROOT']

# Import YAML
require 'yaml'

boxes = YAML.load_file(File.join(File.dirname(__FILE__), 'boxes.yml'))

Vagrant.configure("2") do |config|
  boxes.each do |box|
    config.vm.define box["name"] do |machine|
      name = box["name"]
      coin_template = box["coin"]

      is_windows = name.include? "windows" || (coin_template.include? "windows" unless coin_template.nil?)
      is_mac = name.include? "mac" || (coin_template.include? "mac" unless coin_template.nil?)

      machine.vm.box = box["box"]
      machine.vm.network "private_network", type: "dhcp" unless box["private_net"] == "disabled"

      # VirtualBox specific settings
      machine.vm.provider "virtualbox" do |vb|
        vb.memory = box["memory"] unless box["memory"].nil?
        vb.cpus = box["cpus"] unless box["cpus"].nil?
        vb.gui = box["gui"] unless box["gui"].nil?
        vb.customize ["modifyvm", :id, "--vram", box["vram"]] unless box["vram"].nil?
        vb.name = name
        if is_windows || is_mac # "Intel Pro/1000 MT Desktop" must be used on Windows and Mac
          vb.customize [
            "modifyvm", :id,
            "--nictype1", "82540EM"
          ]
        end

        vb.customize [
          "modifyvm", :id,
          "--clipboard", "bidirectional"
        ]
      end

      # Platform specific configurations
      guest_home = "/home/#{user}"
      provision_script = "provision.sh"
      guest_filedir = ""
      guest_scriptdir ="/tmp/vagrant-shell"

      if is_windows
        machine.vm.guest = :windows
        guest_home = "/#{user}"
        provision_script = "provision.cmd"
        guest_filedir = "c:\\Users\\vagrant\\"
        guest_scriptdir = "c:\\Windows\\temp\\"

        # Test if winrm is available
        begin
          has_winrm = require 'winrm'
        rescue LoadError
          puts "==> #{name}: WinRM gem not installed, falling back to winssh!"
          puts "    #{name}: Shared folder support and file provisioning might fail"
        end

        if has_winrm
          machine.vm.communicator = :winrm
        else
          machine.vm.communicator = :winssh
        end
      elsif is_mac
        guest_home = "/Users/#{user}"
      else
      end

      # Allow overriding defaults
      machine.vm.communicator = box["communicator"] unless box["communicator"].nil?

      if machine.vm.communicator == :winssh
        machine.winssh.insert_key = false # Replacing insecure key on Windows fails or takes forever
      end

      if box["shared_folders"] == "disabled"
        machine.vm.synced_folder ".", "/vagrant", disabled: true if box["shared_folders"] == "disabled"
      elsif is_mac
        machine.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__chown: false
      else
        machine.vm.synced_folder "~", "#{guest_home}"
      end

      # Copying files to guest
      if !is_windows || machine.vm.communicator == :winrm # file provisioning via winssh is broken
        machine.vm.provision "file", source: "~/.gitconfig", destination: "#{guest_filedir}.gitconfig"
        machine.vm.provision "file", source: "~/.ssh", destination: "#{guest_filedir}.ssh"
      end

      # Execution of provisioning script
      if ["up", "provision", "reload", "validate"].include? ARGV[0]
        if coin_root.nil? || !File.exists?(coin_root)
          puts "==> #{name}: COIN_ROOT '#{coin_root}' empty or does not exist" unless ARGV[0] == "validate"
        else
          if !is_windows || machine.vm.communicator == :winrm
            machine.vm.provision "file", source: "#{coin_root}/", destination: "#{guest_filedir}coin"
          end
        end

        if !coin_template.nil?
          if File.file?("#{coin_template}/playbook.yml")
            machine.vm.provision "ansible" do |ansible|
              ansible.playbook = "#{coin_template}/playbook.yml"
            end
          else
            provisioning_file = "#{coin_template}/#{provision_script}"
            if File.file?(provisioning_file)
              machine.vm.provision "shell", path: "#{provisioning_file}",
                args: ["#{coin_template}", "#{user}"],
                upload_path: guest_scriptdir,
                privileged: true
            else
              puts "==> #{name}: Provisioning file at '#{provisioning_file}' not found!"
            end
          end
        else
          puts "==> #{name}: No coin template specified for box '#{name}'"
        end
      end
    end
  end
end
