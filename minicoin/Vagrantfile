# -*- mode: ruby -*-
# vi: set ft=ruby :

$user = ENV['USER']
coin_root = ENV['COIN_ROOT']

# Import YAML
require 'yaml'

boxes = YAML.load_file(File.join(File.dirname(__FILE__), 'boxes.yml'))

Vagrant.configure("2") do |config|
  boxes.each do |box|
    config.vm.define box["name"] do |machine|
      name = box["name"]
      coin_template = box["coin"]
      if coin_template.nil?
        puts "No coin template specified for box '#{name}'"
      end

      is_windows = name.include? "windows" || (coin_template.include? "windows" unless coin_template.nil?)
      is_mac = name.include? "mac" || (coin_template.include? "mac" unless coin_template.nil?)

      machine.vm.box = box["box"]
      machine.vm.network "private_network", type: "dhcp"

      # VirtualBox specific settings
      machine.vm.provider "virtualbox" do |vb|
        vb.memory = box["memory"] unless box["memory"].nil?
        vb.cpus = box["cpus"] unless box["cpus"].nil?
        vb.gui = box["gui"] unless box["gui"].nil?
        vb.name = name
        if is_windows || is_mac
          vb.default_nic_type = "82540EM" # "Intel Pro/1000 MT Desktop" must be used on Windows and Mac
        end

        vb.customize [
            "modifyvm", :id,
            "--clipboard", "bidirectional"
          ]
      end

      # Platform specific configurations
      if is_windows
        provision_script = "provision.cmd"
        machine.vm.guest = :windows
        machine.vm.communicator = "winssh"
        machine.vm.synced_folder "~", "/#{$user}"
        machine.winssh.insert_key = false # Replacing insecure key on Windows fails or takes forever
      elsif is_mac
        provision_script = "provision.sh"
        machine.vm.synced_folder ".", "/vagrant", disabled: true
        # machine.vm.synced_folder "~", "/home/#{$user}", type: "nfs"
      else
        provision_script = "provision.sh"
        machine.vm.synced_folder "~", "/home/#{$user}"
      end

      # Copying files to guest
      if is_windows
        # machine.vm.provision "file", source: "boxes.yml", destination: "boxes.yml"
      else
        machine.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
        machine.vm.provision "file", source: "~/.ssh/", destination: ".ssh/"
      end

      # Execution of provisioning script
      if ["up", "provision", "reload", "validate"].include? ARGV[0]
        if coin_root.nil? || !File.exists?(coin_root)
          puts "COIN_ROOT '#{coin_root}' does not exist" unless ARGV[0] == "validate"
        else
          if !is_windows
            machine.vm.provision "file", source: "#{coin_root}/", destination: "coin"
          end
        end

        if !coin_template.nil?
          provisioning_file = "#{coin_template}/#{provision_script}"
          if File.file?(provisioning_file)
            machine.vm.provision "shell", path: "#{provisioning_file}", args: "#{coin_template}"
          else
            puts "Provisioining file at '#{provisioning_file}' not found!"
          end
        end
      end
    end
  end
end
