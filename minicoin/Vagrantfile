# -*- mode: ruby -*-
# vi: set ft=ruby :

$user = ENV['USER']

# Import YAML
require 'yaml'

yaml = YAML.load_file(File.join(File.dirname(__FILE__), 'boxes.yml'))
urls = yaml["urls"]
machines = yaml["machines"]

def provision(box, role)
  if File.file?("#{role}/playbook.yml")
    box.vm.provision "ansible" do |ansible|
      ansible.playbook = "#{role}/playbook.yml"
      ansible.become = !is_windows
    end
  else
    script_ext = ".sh"
    upload_path = "/tmp/vagrant-shell"
    if box.vm.guest == :windows
      script_ext = ".cmd"
      upload_path = "c:\\Windows\\temp\\"
    end
    provisioning_file = "#{role}/provision#{script_ext}"
    if File.file?(provisioning_file)
      box.vm.provision "shell", path: "#{provisioning_file}",
        args: ["#{role}", "#{$user}"],
        upload_path: upload_path,
        privileged: true
    else
      puts "==> #{box.vm.hostname}: Provisioning file at '#{provisioning_file}' not found!"
    end
  end
end

Vagrant.configure("2") do |config|
  machines.each do |machine|
    config.vm.define machine["name"] do |box|
      name = machine["name"]
      machine_box = machine["box"]

      is_windows = (name.include? "windows") || (machine_box.include? "windows")
      is_mac = (name.include? "mac") || (machine_box.include? "mac")

      urls.each do |url|
        maker = machine_box.split(/\//).first
        source = url[maker]
        unless source.nil?
          box.vm.box_url = [
            "#{source}/#{machine_box}.box",
            "#{source}/#{machine_box}-base.box"
          ]
        end
      end
      box.vm.box = machine_box
      box.vm.hostname = name
      private_net = machine["private_net"]
      if private_net.nil?
        box.vm.network "private_network", type: "dhcp"
      elsif private_net != "disabled"
        box.vm.network "private_network", ip: "#{private_net}"
      end

      # VirtualBox specific settings
      box.vm.provider "virtualbox" do |vb|
        vb.memory = machine["memory"] unless machine["memory"].nil?
        vb.cpus = machine["cpus"] unless machine["cpus"].nil?
        vb.gui = machine["gui"] unless machine["gui"].nil?
        vb.customize ["modifyvm", :id, "--vram", machine["vram"]] unless machine["vram"].nil?
        vb.name = name
        if is_windows || is_mac # "Intel Pro/1000 MT Desktop" must be used on Windows and Mac
          vb.customize [
            "modifyvm", :id,
            "--nictype1", "82540EM"
          ]
        end

        vb.customize [
          "modifyvm", :id,
          "--clipboard", "bidirectional"
        ]
      end

      # Platform specific configurations
      guest_home = "/home/#{$user}"
      guest_filedir = ""

      if is_windows
        box.vm.guest = :windows
        guest_home = "/#{$user}"
        guest_filedir = "c:\\Users\\vagrant\\"

        # Test if winrm is available
        begin
          has_winrm = require 'winrm'
        rescue LoadError
          puts "==> #{name}: WinRM gem not installed, falling back to winssh!"
          puts "    #{name}: Shared folder support and file provisioning might fail"
        end

        if has_winrm
          box.vm.communicator = :winrm
          box.winrm.transport = :plaintext
          box.winrm.basic_auth_only = true
        else
          box.vm.communicator = :winssh
        end
      elsif is_mac
        guest_home = "/Users/#{$user}"
      else
      end

      # Allow overriding defaults
      box.vm.communicator = machine["communicator"] unless machine["communicator"].nil?

      if box.vm.communicator == :winssh
        box.winssh.insert_key = false # Replacing insecure key on Windows fails or takes forever
      end

      if machine["shared_folders"] == "disabled"
        box.vm.synced_folder ".", "/vagrant", disabled: true
      elsif is_mac
        box.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__chown: false
      else
        box.vm.synced_folder "~", "#{guest_home}"
        box.vm.synced_folder ".", "/vagrant"
        if is_windows
          box.vm.provision "shell", inline: "cmd /c mklink /D C:\\vagrant \\\\VBOXSRV\\vagrant"
          box.vm.provision "shell", inline: "cmd /c mklink /D C:\\Users\\#{$user} \\\\VBOXSRV\\#{$user}"
        end
      end

      # Copying files to guest
      if !is_windows || box.vm.communicator == :winrm # file provisioning via winssh is broken
        box.vm.provision "file", source: "~/.gitconfig", destination: "#{guest_filedir}.gitconfig"
        box.vm.provision "file", source: "~/.ssh", destination: "#{guest_filedir}.ssh"
      end

      # Execution of provisioning script
      if ["up", "provision", "reload", "validate"].include? ARGV[0]
        coin_root = ENV['COIN_ROOT']
        if coin_root.nil? || !File.exists?(coin_root)
          puts "==> #{name}: COIN_ROOT '#{coin_root}' empty or does not exist" unless ARGV[0] == "validate"
        else
          if !is_windows || box.vm.communicator == :winrm
            box.vm.provision "file", source: "#{coin_root}/", destination: "#{guest_filedir}coin"
          end
        end

        roles = machine["roles"]
        unless roles.nil? or roles.empty?
          if roles.kind_of?(Array)
            roles.each do |role|
              provision(box, role)
            end
          else
            provision(box, roles)
          end
        end
      end
    end
  end
end
