#!/usr/bin/env bash

source=$(readlink $0)
if [[ $source == "" ]]; then
  if [[ $WINDIR != "" ]]; then
    source=$(realpath $0)
  else
    echo "This script expects to be run via a symlink!"
    exit 1
  fi
fi

minicoin_dir=$(dirname $source)
project_dir="$PWD"
[[ -z $MINICOIN_PROJECT_DIR ]] && export MINICOIN_PROJECT_DIR="$PWD"

function run() {
  cd $minicoin_dir
  "$@"
  error=$?
  cd "$project_dir"
  return $error
}

minicoin_command=
min_args=1

if [[ $# > 0 ]]; then
  if [ $1 == "run" ]; then
    minicoin_command=minicoin_run
    min_args=2
    shift
  elif [ $1 == "jobs" ]; then
    minicoin_command=minicoin_jobs
    min_args=0
    shift
  elif [ $1 == "job-help" ]; then
    minicoin_command=minicoin_jobhelp
    min_args=0
    shift
  elif [ $1 == "update" ]; then
    minicoin_command=minicoin_update
    min_args=0
    shift
  elif [ $1 == "help" ]; then
    minicoin_command="vagant help"
    min_args=99
  fi

  if [[ $minicoin_command == "" ]]; then
    run vagrant "$@"
    exit $?
  fi
fi

if [ "$#" -lt $min_args ]; then
  echo "Controls the minicoin environment by forwarding calls to vagrant or executing"
  echo "a job on machines, operating on the code in the current working environment."
  echo
  echo "Usage: $(basename $0) <command> [options]"
  echo
  echo "Common commands:"
  echo "  run [options] machine1 machine2 ... job [-- [job-args]]"
  echo
IFS='
'
  for line in $($minicoin_dir/run_on.sh --help)
  do
     printf "    %s\n" "$line"
  done
  echo
  echo "  list"
  echo
  echo "    List the available machines, without querying them for their status."
  echo
  echo "  describe [machine1 [machine2]]"
  echo
  echo "    Prints the YAML version for the specificed machines"
  echo
  echo "  ls [--path path] machine1 [machine2] ... [-- [args]]"
  echo
  echo "    Show the contents of 'path' for each machine (defaults to the vagrant user's"
  echo "    home directory. 'args' will be passed to the respective command, ie 'ls' on"
  echo "    mac and Linux guests, and the 'dir' command on Windows guests."
  echo
  echo "  jobs"
  echo
  echo "    Lists the available jobs."
  echo
  echo "  job-help job"
  echo
  echo "    Prints the help for 'job', if available."
  echo
  echo "  update"
  echo
  echo "    Fetches the latest version of minicoin and rebases the local version to it."
  echo
  echo "  <vagrant-command> [options] [machines...]"
  echo "    status      outputs status of the machines"
  echo "    up          starts and provisions the machines"
  echo "    halt        stops the machines"
  echo "    destroy     stops and deletes all traces of the machines"
  echo "    ssh         connects to a machine via SSH"
  echo
  echo "  See 'vagrant help' for details and a complete list of available commands."
  echo
  exit 1
fi

machines=()
job="-1"
script_args=()
args=()

for arg in "${@}"; do
  args+=("$arg")
  if [[ "$arg" = "--" ]]; then
    job="--"
  elif [[ "$job" = '-1' ]]; then
    machines+=("$arg")
  else
    script_args+=("$arg")
  fi
done

function minicoin_run()
{
  run_args=("${machines[@]}" -- "$project_dir" "${script_args[@]}")

  run . run_on.sh "${run_args[@]}"
  error=$?
  return $?
}

function minicoin_jobs()
{
  echo "Available jobs are:"
  run . run_on.sh --jobs
  return $?
}

function minicoin_jobhelp()
{
  job=${args[0]}
  echo "Help for $job:"
  run cat jobs/$job/help.txt
  echo
  error=$?
  if [ ! $error -eq 0 ]; then
    echo "Failed to print help for $job"
  fi
  return $error
}

function minicoin_update()
{
  run git pull --rebase --autostash
}

$minicoin_command
exit $?
