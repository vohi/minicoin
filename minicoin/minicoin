#!/usr/bin/env bash

source=$(readlink $0)
if [[ $source == "" ]]; then
  if [[ $WINDIR != "" ]]; then
    source=$(realpath $0)
  else
    echo "This script expects to be run via a symlink!"
    exit 1
  fi
fi

minicoin_dir=$(dirname $source)
project_dir=$PWD

function run() {
  cd $minicoin_dir
  "$@"
  error=$?
  cd $project_dir
  return $error
}

minicoin_command=
min_args=1

if [[ $# > 0 ]]; then
  if [ $1 == "run" ]; then
    minicoin_command=minicoin_run
    min_args=2
    shift
  elif [ $1 == "jobs" ]; then
    minicoin_command=minicoin_jobs
    min_args=0
    shift
  elif [ $1 == "job-help" ]; then
    minicoin_command=minicoin_jobhelp
    min_args=0
    shift
  elif [ $1 == "ls" ]; then
    minicoin_command=minicoin_ls
    min_args=1
    shift
  fi

  if [[ $minicoin_command == "" ]]; then
    run vagrant "$@"
    exit $?
  fi
fi

if [ "$#" -lt $min_args ]; then
  echo "Controls the minicoin environment by forwarding calls to vagrant or executing"
  echo "a job on machines, operating on the code in the current working environment."
  echo
  echo "Usage: $(basename $0) <command> [options]"
  echo
  echo "Common commands:"
  echo "  run [--parallel] [--verbose] machine1 machine2 ... job [-- [job-args]]"
  echo
  echo "    'machine1..n' is a list of machines on which the job will be run."
  echo "    'job' is the job to run on the machines."
  echo "    '--parallel' triggers parallel execution of the job on several machines"
  echo "    Arguments after '--' will be passed on to the job script. Job arguments that"
  echo "    expand to paths on the host will be adjusted to the guest's file system."
  echo "    '--continuous' runs the job in a loop (implies --parallel), waiting"
  echo "    after each run for the next invocation, which will be executed without"
  echo "    the overhead of setting the job up again."
  echo "    '--abort' makes a current continuous run break out of the loop and exit."
  echo
  echo "  ls machine1 machine2 ... [-- [args]]"
  echo
  echo "    Show the directory contents of each machine. 'args' will be passed to the"
  echo "    respective command, ie 'ls' on mac and Linux guests, and the 'dir' command"
  echo "    on Windows guests."
  echo
  echo "  jobs"
  echo
  echo "    Lists the available jobs."
  echo
  echo "  job-help job"
  echo
  echo "    Prints the help for 'job', if available."
  echo
  echo "  <vagrant-command> [options] [machines...]"
  echo "    status      outputs status of the machines"
  echo "    up          starts and provisions the machines"
  echo "    halt        stops the machines"
  echo "    destroy     stops and deletes all traces of the machines"
  echo "    ssh         connects to a machine via SSH"
  echo
  echo "  See 'vagrant help' for details and a complete list of available commands."
  echo
  exit 1
fi

machines=()
job="-1"
script_args=()
args=()

for arg in "${@}"; do
  args+=("$arg")
  if [[ "$arg" = "--" ]]; then
    job="--"
  elif [[ "$job" = '-1' ]]; then
    machines+=("$arg")
  else
    script_args+=("$arg")
  fi
done

function minicoin_run()
{
  job="${machines[@]: -1}"
  unset "machines[${#machines[@]}-1]"
  script_args=($project_dir ${script_args[@]})
  run_args=(${machines[@]} $job -- ${script_args[@]})

  run . run_on.sh ${run_args[@]}
  error=$?
  return $?
}

function minicoin_jobs()
{
  echo "Available jobs are:"
  run . run_on.sh --jobs
  return $?
}

function minicoin_jobhelp()
{
  job=${args[0]}
  echo "Help for $job:"
  run cat jobs/$job/help.txt
  echo
  error=$?
  if [ ! $error -eq 0 ]; then
    echo "Failed to print help for $job"
  fi
  return $error
}

function minicoin_ls()
{
  args=
  if [[ ! ${script_args[@]} == "" ]]; then
    args=" ${script_args[@]}"
  fi
  for machine in ${machines[@]}; do
    echo "==> $machine:"
    if [[ "$machine" =~ windows ]]; then
      run vagrant winrm -c "cd \$Env:USERPROFILE; cmd /c dir$args" $machine
    else
      run vagrant ssh -c "ls -l$args" $machine
    fi
  done
  error=$?
  return $error
}

$minicoin_command
exit $?