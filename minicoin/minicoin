#!/usr/bin/env bash

source=$(readlink $0)
if [[ $source == "" ]]; then
  echo "This script expects to be run via a symlink!"
  exit 1
fi

minicoin_dir=$(dirname $source)
project_dir=$PWD

function run() {
    cd $minicoin_dir
    $@
    # . ./run_on.sh ${machines[@]} $job -- ${script_args[@]}
    error=$?
    cd $project_dir
    exit $error
}

if [ $1 != "run" ]; then
  run vagrant $@
fi

shift

if [ "$#" -lt 2 ]; then
  echo "Controls the minicoin environment by forwarding calls to vagrant or executing"
  echo "a job on machines, operating on the code in the current working environment."
  echo
  echo "Usage: $(basename $0) <command> [options]"
  echo
  echo "Common commands:"
  echo "  run [--parallel] [--verbose] machine1 machine2 ... job [-- [job-args]]"
  echo
  echo "    'machine1..n' is a list of machines on which the job will be run."
  echo "    'job' is the job to run on the machines."
  echo "    '--parallel' triggers parallel execution of the job on several machines"
  echo "    Arguments after '--' will be passed on to the job script. Job arguments that"
  echo "    expand to paths on the host will be adjusted to the guest's file system."
  echo
  echo "  <vagrant-command> [options] [machines...]"
  echo "    status      outputs status of the machines"
  echo "    up          starts and provisions the machines"
  echo "    halt        stops the machines"
  echo "    destroy     stops and deletes all traces of the machines"
  echo "    ssh         connects to a machine via SSH"
  echo
  echo "  See 'vagrant help' for details and a complete list of available commands."
  echo
  exit 1
fi
  cd $minicoin_dir
  . ./run_on.sh
  cd $project_dir
  exit 1
fi

machines=()
job="-1"
script_args=($project_dir)

for arg in "${@}"; do
  if [[ "$arg" = "--" ]]; then
    job="--"
  elif [[ "$job" = '-1' ]]; then
    machines=( "${machines[@]}" "$arg" )
  else
    script_args=( "${script_args[@]}" "$arg" )
  fi
done

job="${machines[@]: -1}"
unset "machines[${#machines[@]}-1]"
run_args=(${machines[@]} $job -- ${script_args[@]})

run . run_on.sh ${run_args[@]}
exit $?
